"""Notification Service - G·ª≠i th√¥ng b√°o k·∫øt qu·∫£ x·ªï s·ªë"""

import logging
from typing import List
from datetime import date

from telegram import Bot
from telegram.error import TelegramError

from app.config import TELEGRAM_TOKEN as BOT_TOKEN, PROVINCES
from app.services.subscription_service import SubscriptionService
from app.services.lottery_service import LotteryService
from app.ui.formatters import format_lottery_result

logger = logging.getLogger(__name__)


class NotificationService:
    """Service g·ª≠i th√¥ng b√°o t·ª± ƒë·ªông"""
    
    def __init__(self, bot=None):
        self.subscription_service = SubscriptionService()
        self.lottery_service = LotteryService(use_database=True)
        self.bot = bot  # Nh·∫≠n bot instance t·ª´ b√™n ngo√†i

    def _is_result_complete(self, result: dict, region: str) -> bool:
        """
        Ki·ªÉm tra k·∫øt qu·∫£ ƒë√£ ƒë·ªß gi·∫£i ch∆∞a
        
        Args:
            result: K·∫øt qu·∫£ x·ªï s·ªë
            region: MB, MN, MT
            
        Returns:
            True n·∫øu ƒë·ªß gi·∫£i
        """
        if not result or 'prizes' not in result:
            return False
        
        prizes = result['prizes']
        
        # Mi·ªÅn B·∫Øc: 27 gi·∫£i
        if region == "MB":
            required_prizes = ['DB', 'G1', 'G2', 'G3', 'G4', 'G5', 'G6', 'G7']
            prize_count = sum(len(prizes.get(p, [])) for p in required_prizes)
            is_complete = prize_count >= 27
            
            logger.info(f"üîç MB result check: {prize_count}/27 prizes - {'‚úÖ COMPLETE' if is_complete else '‚ö†Ô∏è INCOMPLETE'}")
            return is_complete
        
        # Mi·ªÅn Nam/Trung: 18 gi·∫£i
        else:
            required_prizes = ['DB', 'G1', 'G2', 'G3', 'G4', 'G5', 'G6', 'G7', 'G8']
            prize_count = sum(len(prizes.get(p, [])) for p in required_prizes)
            is_complete = prize_count >= 18
            
            logger.info(f"üîç {region} result check: {prize_count}/18 prizes - {'‚úÖ COMPLETE' if is_complete else '‚ö†Ô∏è INCOMPLETE'}")
            return is_complete
            
    async def send_result_notification(
        self,
        province_code: str,
        result_date: date = None
    ) -> dict:
        """
        G·ª≠i k·∫øt qu·∫£ x·ªï s·ªë cho t·∫•t c·∫£ subscribers c·ªßa 1 t·ªânh
        
        Args:
            province_code: M√£ t·ªânh
            result_date: Ng√†y m·ªü th∆∞·ªüng (m·∫∑c ƒë·ªãnh: h√¥m nay)
            
        Returns:
            Dict v·ªõi th·ªëng k√™ g·ª≠i th√†nh c√¥ng/th·∫•t b·∫°i
        """
        if self.bot is None:
            logger.error("Bot instance not provided!")
            return {"total": 0, "success": 0, "failed": 0, "error": "no_bot"}

        if result_date is None:
            result_date = date.today()
        
        logger.info(f"üì§ Sending notifications for {province_code} - {result_date}")
        
        # L·∫•y danh s√°ch subscribers
        subscribers = await self.subscription_service.get_subscribers_by_province(
            province_code
        )
        
        if not subscribers:
            logger.info(f"‚ÑπÔ∏è No subscribers for {province_code}")
            return {"total": 0, "success": 0, "failed": 0}
        
        # L·∫•y k·∫øt qu·∫£ x·ªï s·ªë
        try:
            # N·∫øu result_date l√† h√¥m nay, d√πng get_latest_result
            if result_date == date.today():
                result = await self.lottery_service.get_latest_result(province_code)
            else:
                # N·∫øu l√† ng√†y c·ª• th·ªÉ, d√πng get_result (t·ª´ API)
                from app.services.lottery_service import LotteryService
                temp_service = LotteryService(use_database=True)
                result = await temp_service.get_result(province_code, result_date)
            
            if not result:
                logger.warning(f"‚ö†Ô∏è No result found for {province_code} - {result_date}")
                return {"total": len(subscribers), "success": 0, "failed": 0, "error": "no_result"}
            
            # Format message
            province = PROVINCES.get(province_code, {})
            region = province.get("region", "MN")
            message = format_lottery_result(result, region)
            
            # Th√™m header cho notification
            notification_header = f"üîî <b>TH√îNG B√ÅO K·∫æT QU·∫¢ X·ªî S·ªê</b>\n\n"
            full_message = notification_header + message
            
        except Exception as e:
            logger.error(f"‚ùå Error getting result: {e}")
            return {"total": len(subscribers), "success": 0, "failed": 0, "error": str(e)}
        
        # G·ª≠i cho t·ª´ng subscriber
        success_count = 0
        failed_count = 0
        
        for subscriber in subscribers:
            try:
                await self.bot.send_message(
                    chat_id=subscriber.user_id,
                    text=full_message,
                    parse_mode="HTML"
                )
                success_count += 1
                logger.info(f"‚úÖ Sent to user {subscriber.user_id}")
                
            except TelegramError as e:
                failed_count += 1
                logger.error(f"‚ùå Failed to send to user {subscriber.user_id}: {e}")
        
        summary = {
            "total": len(subscribers),
            "success": success_count,
            "failed": failed_count,
            "province": province_code,
            "date": str(result_date)
        }
        
        logger.info(f"üìä Notification summary: {summary}")
        return summary
    
    async def send_test_notification(self, user_id: int, province_code: str) -> bool:
        """G·ª≠i th√¥ng b√°o test"""
        try:
            result = await self.lottery_service.get_latest_result(province_code)
            
            if not result:
                await self.bot.send_message(
                    chat_id=user_id,
                    text=f"‚ö†Ô∏è Ch∆∞a c√≥ k·∫øt qu·∫£ m·ªõi nh·∫•t cho {province_code}",
                    parse_mode="HTML"
                )
                return False
            
            province = PROVINCES.get(province_code, {})
            region = province.get("region", "MN")
            message = format_lottery_result(result, region)
            
            test_header = f"üîî <b>TH√îNG B√ÅO TEST</b>\n\n"
            full_message = test_header + message
            
            await self.bot.send_message(
                chat_id=user_id,
                text=full_message,
                parse_mode="HTML"
            )
            
            logger.info(f"‚úÖ Sent test notification to user {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error sending test notification: {e}")
            return False
