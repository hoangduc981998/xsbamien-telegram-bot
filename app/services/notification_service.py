"""Notification Service - G·ª≠i th√¥ng b√°o k·∫øt qu·∫£ x·ªï s·ªë"""

import logging
from typing import List, Optional
from datetime import date, datetime

from telegram import Bot
from telegram.error import TelegramError
from sqlalchemy import select, and_

from app.config import TELEGRAM_TOKEN as BOT_TOKEN, PROVINCES
from app.services.subscription_service import SubscriptionService
from app.services.lottery_service import LotteryService
from app.ui.formatters import format_lottery_result
from app.database import DatabaseSession
from app.models.lottery_result import NotificationLog

logger = logging.getLogger(__name__)


class NotificationService:
    """Service g·ª≠i th√¥ng b√°o t·ª± ƒë·ªông"""
    
    def __init__(self, bot=None):
        self.subscription_service = SubscriptionService()
        self.lottery_service = LotteryService(use_database=True)
        self.bot = bot
    
    async def check_and_send_if_new_result(
        self,
        province_code: str,
        check_date: date = None
    ) -> Optional[dict]:
        """
        ‚úÖ LOGIC M·ªöI: Ki·ªÉm tra c√≥ k·∫øt qu·∫£ m·ªõi kh√¥ng, n·∫øu c√≥ th√¨ g·ª≠i
        
        Args:
            province_code: M√£ t·ªânh
            check_date: Ng√†y ki·ªÉm tra (m·∫∑c ƒë·ªãnh: h√¥m nay)
            
        Returns:
            Dict v·ªõi th·ªëng k√™ n·∫øu ƒë√£ g·ª≠i, None n·∫øu ch∆∞a g·ª≠i
        """
        if check_date is None:
            check_date = date.today()
        
        logger.info(f"üîç Checking new result for {province_code} - {check_date}")
        
        # 1. Ki·ªÉm tra ƒë√£ g·ª≠i ch∆∞a (tr√°nh g·ª≠i tr√πng)
        if await self._already_sent(province_code, check_date):
            logger.info(f"‚è≠Ô∏è  Already sent {province_code} - {check_date}, skipping")
            return None
        
        # 2. Ki·ªÉm tra c√≥ k·∫øt qu·∫£ m·ªõi kh√¥ng
        result = await self.lottery_service.get_latest_result(province_code)
        
        if not result:
            logger.info(f"‚ÑπÔ∏è  No result found for {province_code}")
            return None
        
        # 3. Parse result date v√† so s√°nh
        result_date_str = result.get('date')
        
        # Convert to date object for comparison
        try:
            # Try dd/mm/yyyy format first (API format)
            result_date = datetime.strptime(result_date_str, '%d/%m/%Y').date()
        except (ValueError, TypeError):
            try:
                # Try yyyy-mm-dd format (DB format)
                result_date = datetime.strptime(result_date_str, '%Y-%m-%d').date()
            except (ValueError, TypeError):
                logger.error(f"‚ùå Cannot parse date: {result_date_str}")
                return None
        
        # Ch·ªâ g·ª≠i n·∫øu l√† k·∫øt qu·∫£ c·ªßa ng√†y check_date
        if result_date != check_date:
            logger.info(f"‚è≠Ô∏è  Result date {result_date} != check date {check_date}, skipping")
            return None
        
        logger.info(f"‚úÖ Result date {result_date} matches check date {check_date}")
        
        # 4. Ki·ªÉm tra ƒë·ªß s·ªë gi·∫£i ch∆∞a
        province = PROVINCES.get(province_code, {})
        region = province.get("region", "MN")
        
        if not self._is_result_complete(result, region):
            logger.info(f"‚è≥ Result incomplete for {province_code}, waiting...")
            return None
        
        logger.info(f"‚úÖ Result complete for {province_code}, sending notifications...")
        
        # 5. ƒê·ª¶ GI·∫¢I ‚Üí G·ª¨I NGAY!
        summary = await self.send_result_notification(
            province_code=province_code,
            result_date=check_date
        )
        
        # 6. ƒê√°nh d·∫•u ƒë√£ g·ª≠i
        if summary and summary.get('success', 0) > 0:
            await self._mark_as_sent(province_code, check_date, summary)
        
        return summary
    
    def _is_result_complete(self, result: dict, region: str) -> bool:
        """
        Ki·ªÉm tra k·∫øt qu·∫£ ƒë√£ ƒë·ªß s·ªë gi·∫£i ch∆∞a
        
        Args:
            result: Dict k·∫øt qu·∫£ x·ªï s·ªë
            region: V√πng (MB/MN/MT)
            
        Returns:
            True n·∫øu ƒë·ªß gi·∫£i, False n·∫øu thi·∫øu
        """
        prizes = result.get('prizes', {})
        
        if not prizes:
            return False
        
        # Mi·ªÅn B·∫Øc: 27 gi·∫£i
        if region == 'MB':
            required_count = 27
            total_prizes = sum(len(v) if isinstance(v, list) else 1 for v in prizes.values())
            return total_prizes >= required_count
        
        # Mi·ªÅn Nam/Mi·ªÅn Trung: 18 gi·∫£i
        else:
            required_count = 18
            total_prizes = sum(len(v) if isinstance(v, list) else 1 for v in prizes.values())
            return total_prizes >= required_count
    
    async def send_result_notification(
        self,
        province_code: str,
        result_date: date = None
    ) -> dict:
        """
        G·ª≠i k·∫øt qu·∫£ x·ªï s·ªë cho t·∫•t c·∫£ subscribers c·ªßa 1 t·ªânh
        
        Args:
            province_code: M√£ t·ªânh
            result_date: Ng√†y m·ªü th∆∞·ªüng (m·∫∑c ƒë·ªãnh: h√¥m nay)
            
        Returns:
            Dict v·ªõi th·ªëng k√™ g·ª≠i th√†nh c√¥ng/th·∫•t b·∫°i
        """
        if self.bot is None:
            logger.error("Bot instance not provided!")
            return {"total": 0, "success": 0, "failed": 0, "error": "no_bot"}
        
        if result_date is None:
            result_date = date.today()
        
        logger.info(f"üì§ Sending notifications for {province_code} - {result_date}")
        
        # L·∫•y danh s√°ch subscribers
        subscribers = await self.subscription_service.get_subscribers_by_province(
            province_code
        )
        
        if not subscribers:
            logger.info(f"‚ÑπÔ∏è No subscribers for {province_code}")
            return {"total": 0, "success": 0, "failed": 0}
        
        # L·∫•y k·∫øt qu·∫£ x·ªï s·ªë
        try:
            # L·∫•y k·∫øt qu·∫£ m·ªõi nh·∫•t
            result = await self.lottery_service.get_latest_result(province_code)
            
            if not result:
                logger.warning(f"‚ö†Ô∏è No result found for {province_code} - {result_date}")
                return {"total": len(subscribers), "success": 0, "failed": 0, "error": "no_result"}
            
            # Format message
            province = PROVINCES.get(province_code, {})
            region = province.get("region", "MN")
            message = format_lottery_result(result, region)
            
            # Th√™m header cho notification
            notification_header = f"üîî <b>TH√îNG B√ÅO K·∫æT QU·∫¢ X·ªî S·ªê</b>\n\n"
            full_message = notification_header + message
            
        except Exception as e:
            logger.error(f"‚ùå Error getting result: {e}")
            return {"total": len(subscribers), "success": 0, "failed": 0, "error": str(e)}
        
        # G·ª≠i cho t·ª´ng subscriber
        success_count = 0
        failed_count = 0
        
        for subscriber in subscribers:
            try:
                await self.bot.send_message(
                    chat_id=subscriber.user_id,
                    text=full_message,
                    parse_mode="HTML"
                )
                success_count += 1
                logger.info(f"‚úÖ Sent to user {subscriber.user_id}")
                
            except TelegramError as e:
                failed_count += 1
                logger.error(f"‚ùå Failed to send to user {subscriber.user_id}: {e}")
        
        summary = {
            "total": len(subscribers),
            "success": success_count,
            "failed": failed_count,
            "province": province_code,
            "date": str(result_date)
        }
        
        logger.info(f"üìä Notification summary: {summary}")
        return summary
    
    async def _already_sent(self, province_code: str, result_date: date) -> bool:
        """Ki·ªÉm tra ƒë√£ g·ª≠i th√¥ng b√°o ch∆∞a"""
        try:
            async with DatabaseSession() as session:
                query = select(NotificationLog).where(
                    and_(
                        NotificationLog.province_code == province_code,
                        NotificationLog.result_date == result_date
                    )
                )
                
                result = await session.execute(query)
                log = result.scalar_one_or_none()
                
                return log is not None
                
        except Exception as e:
            logger.error(f"Error checking notification log: {e}")
            return False
    
    async def _mark_as_sent(
        self,
        province_code: str,
        result_date: date,
        summary: dict
    ):
        """ƒê√°nh d·∫•u ƒë√£ g·ª≠i th√¥ng b√°o"""
        try:
            async with DatabaseSession() as session:
                log = NotificationLog(
                    province_code=province_code,
                    result_date=result_date,
                    sent_at=datetime.utcnow(),
                    total_sent=summary.get("total", 0),
                    success_count=summary.get("success", 0),
                    failed_count=summary.get("failed", 0)
                )
                
                session.add(log)
                await session.commit()
                
                logger.info(f"‚úÖ Marked as sent: {province_code} - {result_date}")
                
        except Exception as e:
            logger.error(f"Error marking as sent: {e}")
    
    async def send_test_notification(self, user_id: int, province_code: str) -> bool:
        """G·ª≠i th√¥ng b√°o test"""
        if self.bot is None:
            logger.error("Bot instance not provided!")
            return False
        
        try:
            result = await self.lottery_service.get_latest_result(province_code)
            
            if not result:
                await self.bot.send_message(
                    chat_id=user_id,
                    text=f"‚ö†Ô∏è Ch∆∞a c√≥ k·∫øt qu·∫£ m·ªõi nh·∫•t cho {province_code}",
                    parse_mode="HTML"
                )
                return False
            
            province = PROVINCES.get(province_code, {})
            region = province.get("region", "MN")
            message = format_lottery_result(result, region)
            
            test_header = f"üîî <b>TH√îNG B√ÅO TEST</b>\n\n"
            full_message = test_header + message
            
            await self.bot.send_message(
                chat_id=user_id,
                text=full_message,
                parse_mode="HTML"
            )
            
            logger.info(f"‚úÖ Sent test notification to user {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error sending test notification: {e}")
            return False
