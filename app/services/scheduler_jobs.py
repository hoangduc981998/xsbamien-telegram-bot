"""Scheduler Jobs - CHECK K·∫æT QU·∫¢ M·ªöI TRONG KHUNG GI·ªú C·ª§ TH·ªÇ"""

import logging
from datetime import date, datetime

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from zoneinfo import ZoneInfo

from app.config import PROVINCES, SCHEDULE
from app.services.notification_service import NotificationService

logger = logging.getLogger(__name__)


class SchedulerJobs:
    """Qu·∫£n l√Ω c√°c scheduled jobs"""
    
    def __init__(self, bot):
        self.scheduler = AsyncIOScheduler()
        self.notification_service = NotificationService(bot=bot)
    
    def setup_jobs(self):
        """Thi·∫øt l·∫≠p c√°c jobs"""
        # ‚úÖ ƒê·ªãnh nghƒ©a timezone Vi·ªát Nam
        vietnam_tz = ZoneInfo("Asia/Ho_Chi_Minh")
        
        # ‚úÖ MI·ªÄN B·∫ÆC: Check m·ªói 5 ph√∫t t·ª´ 18:25-18:45
        self.scheduler.add_job(
            self.check_mb_new_results,
            trigger=CronTrigger(
                hour=18, 
                minute='25,30,35,40,45',
                timezone=vietnam_tz
            ),
            id='check_mb_results',
            name='Check Mi·ªÅn B·∫Øc (18:25-18:45, m·ªói 5 ph√∫t)',
            replace_existing=True
        )
        
        # ‚úÖ MI·ªÄN TRUNG: Check m·ªói 5 ph√∫t t·ª´ 17:20-17:45
        self.scheduler.add_job(
            self.check_mt_new_results,
            trigger=CronTrigger(
                hour=17, 
                minute='20,25,30,35,40,45', 
                timezone=vietnam_tz
            ),
            id='check_mt_results',
            name='Check Mi·ªÅn Trung (17:20-17:45, m·ªói 5 ph√∫t)',
            replace_existing=True
        )
        
        # ‚úÖ MI·ªÄN NAM: Check m·ªói 5 ph√∫t t·ª´ 16:20-16:45
        self.scheduler.add_job(
            self.check_mn_new_results,
            trigger=CronTrigger(
                hour=16, 
                minute='20,25,30,35,40,45', 
                timezone=vietnam_tz
                ),
            id='check_mn_results',
            name='Check Mi·ªÅn Nam (16:20-16:45, m·ªói 5 ph√∫t)',
            replace_existing=True
        )
        
        logger.info("‚úÖ Scheduler jobs ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p (OPTIMIZED MODE - GI·ªú VI·ªÜT NAM)")
        logger.info("   üïê MB: 18:20-18:45 VN (m·ªói 5 ph√∫t)")
        logger.info("   üïê MT: 17:20-17:45 VN (m·ªói 5 ph√∫t)")
        logger.info("   üïê MN: 16:20-16:45 VN (m·ªói 5 ph√∫t)")
    
    async def check_mb_new_results(self):
        """Check k·∫øt qu·∫£ Mi·ªÅn B·∫Øc m·ªõi (18:10-18:45)"""
        current_time = datetime.now().strftime("%H:%M")
        logger.info(f"üîç [{current_time}] Checking MB new results...")
        
        today = date.today()
        
        try:
            summary = await self.notification_service.check_and_send_if_new_result(
                province_code="MB",
                check_date=today
            )
            
            if summary:
                logger.info(f"‚úÖ [{current_time}] MB notification sent: {summary}")
            else:
                logger.info(f"‚ÑπÔ∏è [{current_time}] MB: No new complete result or already sent")
                
        except Exception as e:
            logger.error(f"‚ùå Error checking MB: {e}")
    
    async def check_mt_new_results(self):
        """Check k·∫øt qu·∫£ Mi·ªÅn Trung m·ªõi (17:20-17:45)"""
        current_time = datetime.now().strftime("%H:%M")
        logger.info(f"üîç [{current_time}] Checking MT new results...")
        
        today = date.today()
        weekday = today.weekday()
        schedule_day = (weekday + 2) % 7
        
        # L·∫•y t·ªânh Mi·ªÅn Trung quay h√¥m nay
        provinces_today = SCHEDULE["MT"].get(schedule_day, [])
        
        logger.info(f"üìã MT provinces today: {provinces_today}")
        
        for province_code in provinces_today:
            try:
                summary = await self.notification_service.check_and_send_if_new_result(
                    province_code=province_code,
                    check_date=today
                )
                
                if summary:
                    logger.info(f"‚úÖ [{current_time}] {province_code} sent: {summary}")
                    
            except Exception as e:
                logger.error(f"‚ùå Error checking {province_code}: {e}")
    
    async def check_mn_new_results(self):
        """Check k·∫øt qu·∫£ Mi·ªÅn Nam m·ªõi (16:20-16:45)"""
        current_time = datetime.now().strftime("%H:%M")
        logger.info(f"üîç [{current_time}] Checking MN new results...")
        
        today = date.today()
        weekday = today.weekday()
        schedule_day = (weekday + 2) % 7
        
        # L·∫•y t·ªânh Mi·ªÅn Nam quay h√¥m nay
        provinces_today = SCHEDULE["MN"].get(schedule_day, [])
        
        logger.info(f"üìã MN provinces today: {provinces_today}")
        
        for province_code in provinces_today:
            try:
                summary = await self.notification_service.check_and_send_if_new_result(
                    province_code=province_code,
                    check_date=today
                )
                
                if summary:
                    logger.info(f"‚úÖ [{current_time}] {province_code} sent: {summary}")
                    
            except Exception as e:
                logger.error(f"‚ùå Error checking {province_code}: {e}")
    
    def start(self):
        """Kh·ªüi ƒë·ªông scheduler"""
        self.scheduler.start()
        logger.info("üöÄ Scheduler started (OPTIMIZED MODE)")
        logger.info("   ‚è∞ Ch·ªâ check trong khung gi·ªù c·ª• th·ªÉ")
        logger.info("   ‚úÖ Ki·ªÉm tra ƒë·ªß gi·∫£i m·ªõi g·ª≠i")
    
    def shutdown(self):
        """T·∫Øt scheduler"""
        self.scheduler.shutdown()
        logger.info("üõë Scheduler stopped")