"""Command handlers - X·ª≠ l√Ω c√°c l·ªánh /start, /help, /mb, /mt, /mn"""

import logging

from telegram import Update
from telegram.ext import ContextTypes

from app.services.mock_data import get_mock_lottery_result
from app.ui.formatters import format_lottery_result
from app.ui.keyboards import get_main_menu_keyboard
from app.ui.messages import HELP_MESSAGE, WELCOME_MESSAGE

logger = logging.getLogger(__name__)


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω l·ªánh /start - Hi·ªÉn th·ªã menu ch√≠nh"""
    try:
        await update.message.reply_text(WELCOME_MESSAGE, reply_markup=get_main_menu_keyboard(), parse_mode="HTML")
        logger.info(f"User {update.effective_user.id} started bot")
    except Exception as e:
        logger.error(f"Error in start_command: {e}")
        await update.message.reply_text("‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω l·ªánh /help - Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n"""
    try:
        await update.message.reply_text(HELP_MESSAGE, reply_markup=get_main_menu_keyboard(), parse_mode="HTML")
        logger.info(f"User {update.effective_user.id} requested help")
    except Exception as e:
        logger.error(f"Error in help_command: {e}")
        await update.message.reply_text("‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.")


async def mb_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω l·ªánh /mb - K·∫øt qu·∫£ Mi·ªÅn B·∫Øc h√¥m nay"""
    try:
        # Hi·ªÉn th·ªã loading
        loading_msg = await update.message.reply_text("‚è≥ ƒêang t·∫£i k·∫øt qu·∫£ Mi·ªÅn B·∫Øc...")

        # L·∫•y mock data
        result_data = get_mock_lottery_result("MB")
        formatted_result = format_lottery_result("MB", result_data)

        # C·∫≠p nh·∫≠t message
        await loading_msg.edit_text(formatted_result, parse_mode="HTML")

        logger.info(f"User {update.effective_user.id} requested MB results")
    except Exception as e:
        logger.error(f"Error in mb_command: {e}")
        await update.message.reply_text("‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.")


async def mt_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω l·ªánh /mt - K·∫øt qu·∫£ Mi·ªÅn Trung h√¥m nay"""
    try:
        # Hi·ªÉn th·ªã loading
        loading_msg = await update.message.reply_text("‚è≥ ƒêang t·∫£i k·∫øt qu·∫£ Mi·ªÅn Trung...")

        # L·∫•y mock data (DANA - ƒê√† N·∫µng l√†m v√≠ d·ª•)
        result_data = get_mock_lottery_result("DANA")
        formatted_result = format_lottery_result("DANA", result_data)

        # C·∫≠p nh·∫≠t message
        await loading_msg.edit_text(formatted_result, parse_mode="HTML")

        logger.info(f"User {update.effective_user.id} requested MT results")
    except Exception as e:
        logger.error(f"Error in mt_command: {e}")
        await update.message.reply_text("‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.")


async def mn_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω l·ªánh /mn - K·∫øt qu·∫£ Mi·ªÅn Nam h√¥m nay"""
    try:
        # Hi·ªÉn th·ªã loading
        loading_msg = await update.message.reply_text("‚è≥ ƒêang t·∫£i k·∫øt qu·∫£ Mi·ªÅn Nam...")

        # L·∫•y mock data (TPHCM l√†m v√≠ d·ª•)
        result_data = get_mock_lottery_result("TPHCM")
        formatted_result = format_lottery_result("TPHCM", result_data)

        # C·∫≠p nh·∫≠t message
        await loading_msg.edit_text(formatted_result, parse_mode="HTML")

        logger.info(f"User {update.effective_user.id} requested MN results")
    except Exception as e:
        logger.error(f"Error in mn_command: {e}")
        await update.message.reply_text("‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.")
async def subscriptions_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Command: /subscriptions - Qu·∫£n l√Ω ƒëƒÉng k√Ω"""
    from app.services.subscription_service import SubscriptionService
    from app.ui.keyboards import get_subscription_management_keyboard
    from app.config import PROVINCES
    
    user = update.effective_user
    subscription_service = SubscriptionService()
    
    try:
        subscriptions = await subscription_service.get_user_subscriptions(user.id)
        
        message = "üîî <b>QU·∫¢N L√ù ƒêƒÇNG K√ù NH·∫¨N TH√îNG B√ÅO</b>\n\n"
        
        if subscriptions:
            message += f"B·∫°n ƒëang ƒëƒÉng k√Ω <b>{len(subscriptions)}</b> t·ªânh:\n\n"
            for sub in subscriptions:
                province = PROVINCES.get(sub.province_code, {})
                message += f"  üìç {province.get('name', sub.province_code)}\n"
            message += "\n‚ùå Nh·∫•n t·ªânh ƒë·ªÉ h·ªßy ƒëƒÉng k√Ω"
        else:
            message += "B·∫°n ch∆∞a ƒëƒÉng k√Ω t·ªânh n√†o\n\n"
            message += "üí° <i>ƒêƒÉng k√Ω t·∫°i menu c·ªßa t·ª´ng t·ªânh</i>"
        
        await update.message.reply_text(
            message,
            reply_markup=get_subscription_management_keyboard(subscriptions),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error in subscriptions command: {e}")
        await update.message.reply_text(
            "‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau!",
            parse_mode="HTML"
        )


async def test_notify_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Command: /testnotify - Test g·ª≠i th√¥ng b√°o (admin only)"""
    user = update.effective_user
    
    # Admin check
    ADMIN_IDS = [6747306809]  # ID c·ªßa b·∫°n t·ª´ log
    
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y")
        return
    
    try:
        from app.services.notification_service import NotificationService
        
        notification_service = NotificationService(bot=context.bot)
        
        await update.message.reply_text("üì§ ƒêang g·ª≠i th√¥ng b√°o test...")
        
        # G·ª≠i th√¥ng b√°o MB
        summary = await notification_service.send_result_notification("MB")
        
        message = f"üì§ <b>TEST G·ª¨I TH√îNG B√ÅO</b>\n\n"
        message += f"üìç T·ªânh: MB (Mi·ªÅn B·∫Øc)\n"
        message += f"üìä K·∫øt qu·∫£:\n"
        message += f"  ‚Ä¢ T·ªïng subscribers: {summary.get('total', 0)}\n"
        message += f"  ‚Ä¢ G·ª≠i th√†nh c√¥ng: ‚úÖ {summary.get('success', 0)}\n"
        message += f"  ‚Ä¢ G·ª≠i th·∫•t b·∫°i: ‚ùå {summary.get('failed', 0)}\n"
        
        if summary.get('error'):
            message += f"\n‚ö†Ô∏è L·ªói: {summary.get('error')}"
        
        await update.message.reply_text(message, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"Error in test_notify: {e}")
        await update.message.reply_text(f"‚ùå L·ªói: {str(e)}")