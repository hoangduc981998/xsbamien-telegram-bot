"""Callback handlers - X·ª≠ l√Ω t·∫•t c·∫£ c√°c callback t·ª´ inline buttons"""

import logging

from telegram import Update
from telegram.ext import ContextTypes

from app.config import PROVINCES
from app.services.lottery_service import LotteryService
from app.services.statistics_service import StatisticsService
from app.services.mock_data import get_mock_lo_gan
from app.ui.formatters import (
    format_dau_lo,
    format_duoi_lo,
    format_lo_2_so_mb,
    format_lo_2_so_mn_mt,
    format_lo_2_so_stats,
    format_lo_3_so_mb,
    format_lo_3_so_mn_mt,
    format_lo_3_so_stats,
    format_lo_gan,
    format_lottery_result,
    format_result_mb_full,
    format_result_mn_mt_full,
)
from app.ui.keyboards import (
    get_back_to_menu_keyboard,
    get_main_menu_keyboard,
    get_province_detail_keyboard,
    get_province_detail_menu,
    get_region_menu_keyboard,
    get_schedule_back_button,
    get_schedule_menu,
    get_schedule_today_keyboard,
    get_stats_menu_keyboard,
    get_today_schedule_actions,
)
from app.ui.messages import (
    HELP_MESSAGE,
    WELCOME_MESSAGE,
    get_full_week_schedule_message,
    get_region_message,
    get_today_schedule_message,
    get_tomorrow_schedule_message,
)

logger = logging.getLogger(__name__)

# Initialize services
lottery_service = LotteryService(use_database=True)
statistics_service = StatisticsService(use_database=True)


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """X·ª≠ l√Ω t·∫•t c·∫£ callback queries t·ª´ inline buttons"""
    query = update.callback_query
    await query.answer()

    callback_data = query.data
    logger.info(f"User {update.effective_user.id} clicked: {callback_data}")

    try:
        # Main menu
        # Back to main menu
        if callback_data == "back_to_main":
            await query.answer()
            from app.ui.messages import get_welcome_message
            from app.ui.keyboards import get_main_menu_keyboard
            
            message = get_welcome_message()
            keyboard = get_main_menu_keyboard()
            await query.edit_message_text(
                message,
                reply_markup=keyboard,
                parse_mode="HTML",
            )
        
        # Results menu
        elif callback_data == "results_menu":
            await query.answer()
            from app.ui.keyboards import get_results_menu_keyboard
            
            message = "üéØ <b>XEM K·∫æT QU·∫¢ X·ªî S·ªê</b>\n\n"
            message += "Ch·ªçn khu v·ª±c ƒë·ªÉ xem k·∫øt qu·∫£:"
            keyboard = get_results_menu_keyboard()
            await query.edit_message_text(
                message,
                reply_markup=keyboard,
                parse_mode="HTML",
            )
        
        # Main menu
        elif callback_data == "main_menu":
            await query.edit_message_text(
                WELCOME_MESSAGE,
                reply_markup=get_main_menu_keyboard(),
                parse_mode="HTML",
            )

        # Help
        elif callback_data == "help":
            await query.edit_message_text(
                HELP_MESSAGE,
                reply_markup=get_back_to_menu_keyboard(),
                parse_mode="HTML",
            )

        # L·ªãch quay h√¥m nay
        elif callback_data == "today":
            message = get_today_schedule_message()
            await query.edit_message_text(message, reply_markup=get_schedule_today_keyboard(), parse_mode="HTML")

        # L·ªãch quay trong tu·∫ßn
        elif callback_data == "schedule":
            await query.edit_message_text(
                "üìÖ <b>Ch·ªçn Xem L·ªãch Quay</b>\n\nB·∫°n mu·ªën xem l·ªãch c·ªßa ng√†y n√†o?",
                reply_markup=get_schedule_menu(),
                parse_mode="HTML",
            )

        # Quay l·∫°i menu l·ªãch
        elif callback_data == "schedule_menu":
            await query.edit_message_text(
                "üìÖ <b>Ch·ªçn Xem L·ªãch Quay</b>\n\nB·∫°n mu·ªën xem l·ªãch c·ªßa ng√†y n√†o?",
                reply_markup=get_schedule_menu(),
                parse_mode="HTML",
            )

        # L·ªãch h√¥m nay (ƒë·ªông)
        elif callback_data == "schedule_today":
            await query.edit_message_text(
                get_today_schedule_message(),
                reply_markup=get_today_schedule_actions(),
                parse_mode="HTML",
            )

        # L·ªãch ng√†y mai
        elif callback_data == "schedule_tomorrow":
            await query.edit_message_text(
                get_tomorrow_schedule_message(),
                reply_markup=get_schedule_back_button(),
                parse_mode="HTML",
            )

        # L·ªãch c·∫£ tu·∫ßn
        elif callback_data == "schedule_week":
            await query.edit_message_text(
                get_full_week_schedule_message(),
                reply_markup=get_schedule_back_button(),
                parse_mode="HTML",
            )

        # Ch·ªçn mi·ªÅn
        elif callback_data.startswith("region_"):
            region = callback_data.split("_")[1]
            message = get_region_message(region)
            await query.edit_message_text(
                message,
                reply_markup=get_region_menu_keyboard(region),
                parse_mode="HTML",
            )

        # Ch·ªçn t·ªânh
        elif callback_data.startswith("province_"):
            province_key = callback_data.split("_")[1]

            if province_key in PROVINCES:
                province = PROVINCES[province_key]
                message = f"{province['emoji']} <b>{province['name'].upper()}</b>\n\n"
                message += "üìä Ch·ªçn ch·ª©c nƒÉng b·∫°n mu·ªën xem:"

                await query.edit_message_text(
                    message,
                    reply_markup=get_province_detail_menu(province_key),
                    parse_mode="HTML",
                )

        # ‚úÖ THAY ƒê·ªîI: S·ª¨ D·ª§NG API TH·∫¨T
        elif callback_data.startswith("result_") and not callback_data.startswith("result_full_"):
            province_key = callback_data.split("_")[1]

            # Hi·ªÉn th·ªã loading
            await query.edit_message_text("‚è≥ ƒêang t·∫£i k·∫øt qu·∫£ t·ª´ API...")

            # ‚úÖ G·ªåI API TH·∫¨T
            result_data = await lottery_service.get_latest_result(province_key)

            # X√°c ƒë·ªãnh region
            if province_key in ["MB", "MT", "MN"]:
                region = province_key
            else:
                province = PROVINCES.get(province_key, {})
                region = province.get("region", "MN")

            logger.info(f"üîç province_key={province_key}, region={region}")

            # Format result
            formatted_result = format_lottery_result(result_data, region)

            await query.edit_message_text(
                formatted_result,
                reply_markup=get_province_detail_keyboard(province_key),
                parse_mode="HTML",
            )

        # Menu th·ªëng k√™
        elif callback_data == "stats_menu":
            message = "üìä <b>TH·ªêNG K√ä & PH√ÇN T√çCH</b>\n\n"
            message += "Ch·ªçn lo·∫°i th·ªëng k√™ b·∫°n mu·ªën xem:"

            await query.edit_message_text(message, reply_markup=get_stats_menu_keyboard(), parse_mode="HTML")

        # Th·ªëng k√™ l√¥ 2 s·ªë theo mi·ªÅn
        elif callback_data.startswith("stats_") and "_2digit" in callback_data:
            region = callback_data.split("_")[1]
            region_names = {"MB": "Mi·ªÅn B·∫Øc", "MT": "Mi·ªÅn Trung", "MN": "Mi·ªÅn Nam"}

            try:
                # Query frequency t·ª´ database (50 ng√†y)
                frequency = await statistics_service.get_frequency_stats(region, days=50)
                
                # Format message
                if frequency:
                    sorted_freq = sorted(frequency.items(), key=lambda x: x[1], reverse=True)[:30]
                    
                    message = f"üìä <b>TH·ªêNG K√ä L√î 2 S·ªê - {region_names.get(region, region)}</b>\n"
                    message += f"üìÖ D·ªØ li·ªáu: 50 ng√†y g·∫ßn nh·∫•t t·ª´ database\n\n"
                    
                    message += "üî• <b>Top 30 s·ªë hay v·ªÅ:</b>\n"
                    for idx, (num, count) in enumerate(sorted_freq, 1):
                        message += f"  {idx:2d}. <code>{num}</code> - {count:2d} l·∫ßn\n"
                    
                    message += f"\nüíæ T·ªïng: {len(frequency)} s·ªë ƒë√£ xu·∫•t hi·ªán"
                else:
                    message = "‚ö†Ô∏è Ch∆∞a c√≥ d·ªØ li·ªáu trong database"
                await query.edit_message_text(
                    message,
                    reply_markup=get_back_to_menu_keyboard(),
                    parse_mode="HTML",
                )
            except Exception as e:
                logger.error(f"Error in stats by region: {e}")
                await query.edit_message_text(
                    f"‚ùå L·ªói khi l·∫•y th·ªëng k√™: {str(e)}",
                    reply_markup=get_back_to_menu_keyboard(),
                    parse_mode="HTML",
                )

        # Th·ªëng k√™ l√¥ 2 s·ªë theo t·ªânh
        elif callback_data.startswith("stats2_"):
            province_key = callback_data.split("_")[1]
            province = PROVINCES.get(province_key, {})

            try:
                # Query frequency t·ª´ database (50 ng√†y)
                frequency = await statistics_service.get_frequency_stats(province_key, days=50)
                
                # Format message
                if frequency:
                    sorted_freq = sorted(frequency.items(), key=lambda x: x[1], reverse=True)[:30]
                    
                    message = f"üìä <b>TH·ªêNG K√ä L√î 2 S·ªê - {province.get('name', '')}</b>\n"
                    message += f"üìÖ D·ªØ li·ªáu: 50 ng√†y g·∫ßn nh·∫•t t·ª´ database\n\n"
                    
                    message += "üî• <b>Top 30 s·ªë hay v·ªÅ:</b>\n"
                    for idx, (num, count) in enumerate(sorted_freq, 1):
                        message += f"  {idx:2d}. <code>{num}</code> - {count:2d} l·∫ßn\n"
                    
                    message += f"\nüíæ T·ªïng: {len(frequency)} s·ªë ƒë√£ xu·∫•t hi·ªán"
                else:
                    message = "‚ö†Ô∏è Ch∆∞a c√≥ d·ªØ li·ªáu trong database"
                
                await query.edit_message_text(
                    message,
                    reply_markup=get_province_detail_keyboard(province_key),
                    parse_mode="HTML",
                )
            except Exception as e:
                logger.error(f"Error in stats2 for {province_key}: {e}")
                await query.edit_message_text(
                    f"‚ùå L·ªói khi l·∫•y th·ªëng k√™: {str(e)}",
                    reply_markup=get_province_detail_keyboard(province_key),
                    parse_mode="HTML",
                )

        # Th·ªëng k√™ l√¥ 3 s·ªë theo t·ªânh
        elif callback_data.startswith("stats3_"):
            province_key = callback_data.split("_")[1]
            province = PROVINCES.get(province_key, {})

            try:
                # Query frequency t·ª´ database (50 ng√†y)
                frequency = await statistics_service.get_lo3so_frequency_stats(province_key, days=50)
                
                # Format message
                if frequency:
                    sorted_freq = sorted(frequency.items(), key=lambda x: x[1], reverse=True)[:30]
                    
                    message = f"üìä <b>TH·ªêNG K√ä L√î 3 S·ªê (BA C√ÄNG) - {province.get('name', '')}</b>\n"
                    message += f"üìÖ D·ªØ li·ªáu: 50 ng√†y g·∫ßn nh·∫•t t·ª´ database\n\n"
                    
                    message += "üî• <b>Top 30 s·ªë hay v·ªÅ:</b>\n"
                    for i, (num, count) in enumerate(sorted_freq, 1):
                        message += f"  {i:2d}. <code>{num}</code> - {count:2d} l·∫ßn\n"
                    
                    message += f"\nüíæ T·ªïng: {len(frequency)} s·ªë ƒë√£ xu·∫•t hi·ªán"
                else:
                    # Fallback to 1-day stats if no database data
                    result = await lottery_service.get_latest_result(province_key)
                    stats = statistics_service.analyze_lo_3_so(result)
                    message = format_lo_3_so_stats(stats, province.get("name", ""))
                    message += "\n\n‚ö†Ô∏è <i>Ch∆∞a c√≥ d·ªØ li·ªáu d√†i h·∫°n trong database</i>"
                
                await query.edit_message_text(
                    message,
                    reply_markup=get_province_detail_keyboard(province_key),
                    parse_mode="HTML",
                )
            except Exception as e:
                logger.error(f"Error in stats3 for {province_key}: {e}")
                await query.edit_message_text(
                    f"‚ùå L·ªói khi l·∫•y th·ªëng k√™: {str(e)}",
                    reply_markup=get_province_detail_keyboard(province_key),
                    parse_mode="HTML",
                )


        # Th·ªëng k√™ ƒë·∫ßu-ƒëu√¥i
        elif callback_data == "stats_headtail":
            try:
                # Get MB result (headtail usually for MB)
                result = await lottery_service.get_latest_result("MB")
                
                # Use existing formatters
                dau_message = format_dau_lo(result)
                duoi_message = format_duoi_lo(result)
                
                # Combine messages
                message = dau_message + "\n\n" + duoi_message
                
                await query.edit_message_text(
                    message,
                    reply_markup=get_back_to_menu_keyboard(),
                    parse_mode="HTML",
                )
            except Exception as e:
                logger.error(f"Error in stats_headtail: {e}")
                await query.edit_message_text(
                    f"‚ùå L·ªói khi l·∫•y th·ªëng k√™: {str(e)}",
                    reply_markup=get_back_to_menu_keyboard(),
                    parse_mode="HTML",
                )

        # L√¥ gan
        elif callback_data == "stats_gan":
            try:
                # Use mock data for now (will be real DB query in PR #2)
                gan_data = get_mock_lo_gan("MB", days=30)
                
                # Format message
                message = format_lo_gan(gan_data, "Mi·ªÅn B·∫Øc")
                
                await query.edit_message_text(
                    message,
                    reply_markup=get_back_to_menu_keyboard(),
                    parse_mode="HTML",
                )
            except Exception as e:
                logger.error(f"Error in stats_gan: {e}")
                await query.edit_message_text(
                    f"‚ùå L·ªói khi l·∫•y th·ªëng k√™: {str(e)}",
                    reply_markup=get_back_to_menu_keyboard(),
                    parse_mode="HTML",
                )

        # ƒêƒÉng k√Ω nh·∫Øc nh·ªü
        elif callback_data.startswith("subscribe_"):
            province_key = callback_data.split("_")[1]
            province = PROVINCES.get(province_key, {})

            message = "üîî <b>ƒêƒÇNG K√ù NH·∫ÆC NH·ªû</b>\n\n"
            message += f"B·∫°n mu·ªën nh·∫≠n th√¥ng b√°o khi c√≥ k·∫øt qu·∫£ <b>{province.get('name', '')}</b>?\n\n"
            message += "‚ö†Ô∏è <i>T√≠nh nƒÉng ƒëang ph√°t tri·ªÉn...</i>\n"
            message += "S·∫Ω s·ªõm ra m·∫Øt trong phi√™n b·∫£n ti·∫øp theo!"

            await query.edit_message_text(
                message,
                reply_markup=get_province_detail_keyboard(province_key),
                parse_mode="HTML",
            )

        # ‚úÖ K·∫æT QU·∫¢ ƒê·∫¶Y ƒê·ª¶ - D√ôNG API
        elif callback_data.startswith("result_full_"):
            province_code = callback_data.replace("result_full_", "")

            # ‚úÖ G·ªåI API TH·∫¨T
            result_data = await lottery_service.get_latest_result(province_code)

            logger.info(f"üîç result_full_{province_code}")
            logger.info(f"üîç result_data keys: {result_data.keys()}")

            # Format theo mi·ªÅn
            if province_code == "MB":
                message = format_result_mb_full(result_data)
            else:
                message = format_result_mn_mt_full(result_data)

            await query.edit_message_text(
                message,
                reply_markup=get_province_detail_menu(province_code),
                parse_mode="HTML",
            )

        # ‚úÖ L√î 2 S·ªê - D√ôNG API
        elif callback_data.startswith("lo2_"):
            province_code = callback_data.replace("lo2_", "")

            # ‚úÖ G·ªåI API TH·∫¨T
            result_data = await lottery_service.get_latest_result(province_code)

            # Format theo mi·ªÅn
            if province_code == "MB":
                message = format_lo_2_so_mb(result_data)
            else:
                message = format_lo_2_so_mn_mt(result_data)

            await query.edit_message_text(
                message,
                reply_markup=get_province_detail_menu(province_code),
                parse_mode="HTML",
            )

        # ‚úÖ L√î 3 S·ªê - D√ôNG API
        elif callback_data.startswith("lo3_"):
            province_code = callback_data.replace("lo3_", "")

            # ‚úÖ G·ªåI API TH·∫¨T
            result_data = await lottery_service.get_latest_result(province_code)

            # Format theo mi·ªÅn
            if province_code == "MB":
                message = format_lo_3_so_mb(result_data)
            else:
                message = format_lo_3_so_mn_mt(result_data)

            await query.edit_message_text(
                message,
                reply_markup=get_province_detail_menu(province_code),
                parse_mode="HTML",
            )

        # ‚úÖ ƒê·∫¶U L√î - D√ôNG API
        elif callback_data.startswith("daulo_"):
            province_code = callback_data.replace("daulo_", "")

            # ‚úÖ G·ªåI API TH·∫¨T
            result_data = await lottery_service.get_latest_result(province_code)
            message = format_dau_lo(result_data)

            await query.edit_message_text(
                message,
                reply_markup=get_province_detail_menu(province_code),
                parse_mode="HTML",
            )

        # ‚úÖ ƒêU√îI L√î - D√ôNG API
        elif callback_data.startswith("duoilo_"):
            province_code = callback_data.replace("duoilo_", "")

            # ‚úÖ G·ªåI API TH·∫¨T
            result_data = await lottery_service.get_latest_result(province_code)
            message = format_duoi_lo(result_data)

            await query.edit_message_text(
                message,
                reply_markup=get_province_detail_menu(province_code),
                parse_mode="HTML",
            )

        # Fallback
        else:
            await query.edit_message_text(
                f"‚ö†Ô∏è Ch·ª©c nƒÉng <code>{callback_data}</code> ƒëang ph√°t tri·ªÉn...",
                reply_markup=get_back_to_menu_keyboard(),
                parse_mode="HTML",
            )

    except Exception as e:
        logger.error(f"Error in button_callback: {e}")
        try:
            await query.edit_message_text(
                "‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.",
                reply_markup=get_back_to_menu_keyboard(),
            )
        except Exception:
            pass
